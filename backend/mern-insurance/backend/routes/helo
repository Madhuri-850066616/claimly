const router = require('express').Router()
const { default: mongoose } = require('mongoose')
const Claims = require('../models/claims_model.js')
const Admin=require('../models/admin_model')
const User=require('../models/users_model')
const dotenv= require('dotenv');
const cloudinary = require('cloudinary').v2;
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

dotenv.config();

cloudinary.config({
    cloud_name:process.env.CLOUDINARY_CLOUD_NAME,
    api_key:process.env.CLOUDINARY_API_KEY,
    api_secret:process.env.CLOUDINARY_API_SECRET
});

router.post('/claim',async(req,res)=>{
    try{ const email=req.body.email
    const claims_proof=req.body.claims_proof
    const aadhar_proof=req.body.aadhar_proof
    const session=await mongoose.startSession()
    session.startTransaction();
    const admin= Admin.findOne({email}).session(session);
    if(!admin) throw new Error('ADMIN not found')

    const uploadImage = async (file) => {
        return new Promise((resolve, reject) => {
          cloudinary.uploader.upload(file, (error, result) => {
            if (error) {
              reject(error);
            } else {
              resolve(result.secure_url);
            }
          });
        });
      };

      const photoURL =  await uploadImage(claims_proof.url);
      const photoURL2 =  await uploadImage(aadhar_proof.url);

    // const photoURL=await cloudinary.uploader.upload(claim_proof);
    // const photoURL2=await cloudinary.uploader.upload(aadhar_proof);
    
     const claim =  new Claims({
        admin_id:admin._id,
        //change to user
        user_id:req.body.user_id, 
        insurance_type:req.body.insurance_type, 
        policy_number:req.body.policy_number, 
        policy_type:req.body.policy_type, 
        uni:req.body.uin, 
        nominee_name:req.body.nominee_name, 
        nominee_relation:req.body.nominee_relation, 
        account_number:req.body.account_number, 
        bank_name:req.body.bank_name, 
        bank_branch:req.body.bank_branch, 
        ifsc_code:req.body.ifsc_code, 
        aadhar_number:req.body.aadhar_number, 
        cause_of_death:req.body.cause_of_death,
        dod:req.body.dod, 
        fir_number:req.body.fir_number, 
        vehicle_damage:req.body.vehicle_damage, 
        chassis_number:req.body.chassis_number, 
        vehicle_number:req.body.vehicle_number, 
        opd_number:req.body.opd_number, 
        hospital_name:req.body.hospital_name,
        doa:req.body.doa,
        doctor_name:req.body.doctor_name,
        claim_amount:req.body.claim_amount,
        Comments:req.body.Comments,
        status:req.body.status,
        aadhar_proof:photoURL2,
        claims_proof:photoURL,
      

    })
  
    
        admin.allclaims.push(claim._id)
        await admin.save({session});
        await session.commitTransaction();
        const savedclaim = await claim.save()
        res.status(201).json(savedclaim)
    }catch(err){
        console.log(err)
    }
})

    router.get('/claim',async(req,res)=>{
        const docs=await Claims.find({})
        res.json(docs)
    });

    
    
    router.get('/claim/:id',async(req,res)=>{
        const {id}=req.params;
        const claimexists=await Claims.findOne({_id:id})
        if(claimexists){ res.status(200).json(claimexists)}
        else{
            res.status(404).json({message:"Claim not Found"})
        }
    });


module.exports = router




